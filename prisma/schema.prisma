generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rentals   Rental[]
  orders    Order[]
}

enum Role {
  USER
  ADMIN
}

model Book {
  id          String      @id @default(uuid())
  title       String
  author      String
  category    String
  year        Int
  description String
  price       Float
  rentalPrice Float
  imageUrl    String?
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  rentals     Rental[]
  orderItems  OrderItem[]
}

model Rental {
  id           String       @id @default(uuid())
  userId       String
  bookId       String
  startDate    DateTime     @default(now())
  endDate      DateTime
  isReturned   Boolean      @default(false)
  rentalPeriod RentalPeriod
  reminderSent Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  book         Book         @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

enum RentalPeriod {
  TWO_WEEKS
  ONE_MONTH
  THREE_MONTHS
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
}

model OrderItem {
  id       String @id @default(uuid())
  orderId  String
  bookId   String
  quantity Int
  price    Float
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book     Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}
